// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  username         String?   @unique
  name             String?
  password         String?
  emailVerified    Boolean   @default(false)
  twoFactorEnabled Boolean   @default(false)
  kycStatus        KycStatus @default(pending)
  role             UserRole  @default(USER)

  // Virtual wallet balance (since we're not using real blockchain)
  walletBalance Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedWallet   String?
  walletAssignedAt DateTime?

  notificationSettings UserNotificationSettings?

  externalWalletSeed       String?   @db.Text
  externalWalletConfigured Boolean   @default(false)
  seedPhraseConfiguredAt   DateTime?

  // Relations
  accounts                Account[]
  sessions                Session[]
  createdCollections      Collection[]              @relation("CollectionCreator")
  ownedNFTs               NFTItem[]                 @relation("NFTOwner")
  sentTransactions        Transaction[]             @relation("TransactionSender")
  receivedTransactions    Transaction[]             @relation("TransactionReceiver")
  buyerEscrows            EscrowTransaction[]       @relation("EscrowBuyer")
  sellerEscrows           EscrowTransaction[]       @relation("EscrowSeller")
  withdrawalRequests      WithdrawalRequest[]
  whitelistedAddress      WhitelistedAddress[]
  bid                     Bid[]
  DepositRequest          DepositRequest[]
  LotteryTicket           LotteryTicket[]
  PurchaseSession         PurchaseSession[]
  PlatformWallet          PlatformWallet?           @relation(fields: [assignedWallet], references: [address], onDelete: SetNull)
  Exhibition              Exhibition[]
  ExhibitionParticipation ExhibitionParticipation[]

  @@map("users")
}

model UserNotificationSettings {
  id                 String  @id @default(uuid())
  userId             String  @unique
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  salesAlerts        Boolean @default(true)
  bidAlerts          Boolean @default(true)
  exhibitionUpdates  Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_notification_settings")
}

model PlatformWallet {
  id         String       @id @default(uuid())
  address    String       @unique
  index      Int          @unique
  status     WalletStatus @default(available)
  assignedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations - One wallet can have many users
  users User[]

  @@map("platform_wallets")
}

enum WalletStatus {
  available
  assigned
  maintenance
  disabled
}

model Collection {
  id                String  @id @default(uuid())
  contractAddress   String  @unique
  name              String
  symbol            String?
  description       String?
  creatorId         String
  royaltyPercentage Float   @default(0)
  floorPrice        Float?
  totalVolume       Float   @default(0)
  totalItems        Int     @default(0)
  listedItems       Int     @default(0)
  blockchain        String  @default("ethereum")
  ipfsMetadataUri   String?
  verified          Boolean @default(false)
  category          String?
  image             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator                           User                                @relation("CollectionCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  nfts                              NFTItem[]
  Exhibition                        Exhibition?                         @relation(fields: [exhibitionId], references: [id])
  exhibitionId                      String?
  ExhibitionCollection              ExhibitionCollection[]
  ExhibitionParticipationCollection ExhibitionParticipationCollection[]

  @@map("collections")
}

model NFTItem {
  id              String  @id @default(uuid())
  collectionId    String
  tokenId         String
  ownerId         String
  name            String
  description     String?
  image           String
  ipfsMetadataUri String
  category        String
  rarity          Rarity
  likes           Int     @default(0)
  views           Int     @default(0)
  attributes      Json?
  isListed        Boolean @default(false)
  listPrice       Float?
  currency        String  @default("ETH")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  collection                 Collection                   @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  owner                      User                         @relation("NFTOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  transactions               Transaction[]
  escrows                    EscrowTransaction[]
  withdrawalRequests         WithdrawalRequest[]
  auctions                   Auction[]
  PurchaseSession            PurchaseSession[]
  Exhibition                 Exhibition?                  @relation(fields: [exhibitionId], references: [id])
  exhibitionId               String?
  ExhibitionNFT              ExhibitionNFT[]
  ExhibitionParticipationNFT ExhibitionParticipationNFT[]

  @@unique([collectionId, tokenId])
  @@map("nft_items")
}

model Transaction {
  id              String            @id @default(uuid())
  transactionHash String            @unique
  nftItemId       String?
  fromUserId      String?
  toUserId        String?
  transactionType TransactionType
  price           Float?
  currency        String?           @default("ETH")
  gasFee          Float?
  platformFee     Float?
  royaltyFee      Float?
  blockchain      String            @default("ethereum")
  status          TransactionStatus @default(pending)

  // Additional fields for display
  nftName String?
  from    String?
  to      String?

  createdAt   DateTime  @default(now())
  confirmedAt DateTime?

  // Relations
  nftItem  NFTItem? @relation(fields: [nftItemId], references: [id], onDelete: Cascade)
  fromUser User?    @relation("TransactionSender", fields: [fromUserId], references: [id])
  toUser   User?    @relation("TransactionReceiver", fields: [toUserId], references: [id])

  @@map("transactions")
}

model Exhibition {
  id          String  @id @default(uuid())
  title       String
  description String?
  image       String?
  bannerImage String?

  // Exhibition details
  startDate DateTime
  endDate   DateTime
  status    ExhibitionStatus @default(upcoming)
  category  String?
  tags      String[]

  // Location details (virtual/physical)
  locationType LocationType @default(virtual)
  venueName    String?
  venueAddress String?
  virtualUrl   String?

  // Stats
  views    Int     @default(0)
  likes    Int     @default(0)
  featured Boolean @default(false)

  // Relations
  creatorId   String
  creator     User         @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  collections Collection[]
  nfts        NFTItem[]

  // Timestamps
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  exhibitionCollections   ExhibitionCollection[]
  exhibitionNFTs          ExhibitionNFT[]
  ExhibitionParticipation ExhibitionParticipation[]

  @@map("exhibitions")
}

model ExhibitionCollection {
  id           String @id @default(uuid())
  exhibitionId String
  collectionId String
  order        Int    @default(0)

  exhibition Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([exhibitionId, collectionId])
  @@map("exhibition_collections")
}

model ExhibitionNFT {
  id           String  @id @default(uuid())
  exhibitionId String
  nftItemId    String
  order        Int     @default(0)
  featured     Boolean @default(false)

  exhibition Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade)
  nftItem    NFTItem    @relation(fields: [nftItemId], references: [id], onDelete: Cascade)

  @@unique([exhibitionId, nftItemId])
  @@map("exhibition_nfts")
}

model ExhibitionParticipation {
  id           String              @id @default(uuid())
  exhibitionId String
  userId       String
  status       ParticipationStatus @default(pending)

  // What the user wants to submit
  nftItems    ExhibitionParticipationNFT[]
  collections ExhibitionParticipationCollection[]

  // Additional information
  message String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  exhibition Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([exhibitionId, userId])
  @@map("exhibition_participations")
}

model ExhibitionParticipationNFT {
  id              String @id @default(uuid())
  participationId String
  nftItemId       String
  order           Int    @default(0)

  participation ExhibitionParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  nftItem       NFTItem                 @relation(fields: [nftItemId], references: [id], onDelete: Cascade)

  @@unique([participationId, nftItemId])
  @@map("exhibition_participation_nfts")
}

model ExhibitionParticipationCollection {
  id              String @id @default(uuid())
  participationId String
  collectionId    String
  order           Int    @default(0)

  participation ExhibitionParticipation @relation(fields: [participationId], references: [id], onDelete: Cascade)
  collection    Collection              @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([participationId, collectionId])
  @@map("exhibition_participation_collections")
}

enum ParticipationStatus {
  pending
  approved
  rejected
  withdrawn
}

enum ExhibitionStatus {
  draft
  upcoming
  active
  ended
  cancelled
}

enum LocationType {
  virtual
  physical
  hybrid
}

model EscrowTransaction {
  id                    String       @id @default(uuid())
  nftItemId             String
  buyerId               String
  sellerId              String
  escrowContractAddress String?
  amount                Float
  currency              String       @default("ETH")
  status                EscrowStatus @default(locked)

  createdAt  DateTime  @default(now())
  releasedAt DateTime?
  expiresAt  DateTime?

  // Relations
  nftItem NFTItem @relation(fields: [nftItemId], references: [id], onDelete: Cascade)
  buyer   User    @relation("EscrowBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  seller  User    @relation("EscrowSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("escrow_transactions")
}

model WithdrawalRequest {
  id                 String           @id @default(uuid())
  userId             String
  nftItemId          String?
  destinationAddress String
  destinationNetwork String
  withdrawalFee      Float?
  verificationCode   String?
  status             WithdrawalStatus @default(pending)

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nftItem NFTItem? @relation(fields: [nftItemId], references: [id], onDelete: Cascade)

  @@map("withdrawal_requests")
}

model WhitelistedAddress {
  id        String    @id @default(uuid())
  userId    String
  address   String
  label     String
  addedAt   DateTime  @default(now())
  lockUntil DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("whitelisted_addresses")
}

//////////////////////////////////
//////////////////////////////////

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([email, token])
}

model Auction {
  id              String        @id @default(uuid())
  nftItemId       String
  type            AuctionType
  status          AuctionStatus @default(upcoming)
  startingPrice   Float?
  reservePrice    Float?
  minimumBid      Float?
  bidIncrement    Float?
  buyNowPrice     Float? // Added for BUY_NOW auctions
  ticketPrice     Float? // Added for LOTTERY auctions
  maxTickets      Int? // Added for LOTTERY auctions
  startTime       DateTime
  endTime         DateTime
  bidders         Int           @default(0)
  views           Int           @default(0)
  blockchain      String        @default("ethereum")
  contractAddress String? // Smart contract address for on-chain auctions
  tokenStandard   String        @default("ERC721") // ERC721 or ERC1155

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  nftItem NFTItem         @relation(fields: [nftItemId], references: [id], onDelete: Cascade)
  bids    Bid[]
  tickets LotteryTicket[] // For lottery auctions

  @@map("auctions")
}

model LotteryTicket {
  id        String  @id @default(uuid())
  auctionId String
  buyerId   String
  tickets   Int     @default(1)
  txHash    String?

  createdAt DateTime @default(now())

  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  buyer   User    @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  @@unique([auctionId, buyerId])
  @@map("lottery_tickets")
}

model Bid {
  id        String @id @default(uuid())
  auctionId String
  bidderId  String
  amount    Float

  createdAt DateTime @default(now())

  // Relations
  auction Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  bidder  User    @relation(fields: [bidderId], references: [id], onDelete: Cascade)

  @@map("bids")
}

model DepositRequest {
  id              String        @id @default(uuid())
  userId          String
  transactionHash String?       @unique
  amount          Float
  currency        String        @default("ETH")
  status          DepositStatus @default(pending)
  adminNotes      String?

  createdAt   DateTime  @default(now())
  approvedAt  DateTime?
  processedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deposit_requests")
}

model PurchaseSession {
  id              String                @id @default(uuid())
  userId          String
  nftItemId       String
  amount          Float
  currency        String                @default("ETH")
  status          PurchaseSessionStatus @default(pending)
  expiresAt       DateTime
  transactionHash String?
  adminNotified   Boolean               @default(false)

  // Additional data for the purchase
  nftData Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  nftItem NFTItem @relation(fields: [nftItemId], references: [id], onDelete: Cascade)

  @@map("purchase_sessions")
}

enum PurchaseSessionStatus {
  pending
  processing
  completed
  expired
  cancelled
  failed
}

////////////////////
////////////////////
////////////////////

enum UserRole {
  SUPERADMIN
  ADMIN
  USER
}

enum KycStatus {
  pending
  approved
  rejected
}

enum Rarity {
  Common
  Rare
  Epic
  Legendary
}

enum TransactionType {
  mint
  sale
  transfer
  deposit
  withdrawal
  purchase
}

enum TransactionStatus {
  pending
  confirmed
  failed
  completed
}

enum EscrowStatus {
  locked
  released
  refunded
  disputed
}

enum WithdrawalStatus {
  pending
  verified
  processing
  completed
  failed
}

enum AuctionType {
  STANDARD // Traditional highest bidder wins
  RESERVE // Must meet reserve price
  TIMED // Fixed duration, highest bid wins
  DUTCH // Price decreases over time
  BLIND // Sealed bids revealed at end
  LOTTERY // Participants buy tickets, random winner
  BUY_NOW // Fixed price with auction option
  MULTI_TOKEN // Bundle of NFTs auctioned together
}

enum AuctionStatus {
  live
  upcoming
  ended
  cancelled
}

enum DepositStatus {
  pending
  approved
  rejected
  completed
}
